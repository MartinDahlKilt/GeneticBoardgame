package org.mdk.BoardGame.Backgammon.Player;

import java.util.Arrays;
import java.util.List;

import org.mdk.BoardGame.Board;
import org.mdk.BoardGame.Backgammon.BackgammonBoard;
import org.mdk.BoardGame.Backgammon.BackgammonRoll;

public class MDKEvalPlayer extends BackgammonPlayer {
//	private double wr[] = {-1.7506023993623376,-1.9527626380751464,-0.5379389301746471,-4.83971539317013,-1.765778897604,-7.263349862110329,-5.587519461557594,-4.8411334751273225,-5.876439485027395,-1.1511111616813876,
//			-3.523238934202481,-6.438203275570736,-1.5355950799477016,-5.355052223301792,-6.659660412194687,-7.498445262177435,-5.374998330307569,-1.6758242462475792,-7.51909776992283,-6.3604601894761235,
//			-7.61964717323037,-3.8782576910533395,-2.1805264612698387,-6.067299508923857,-3.3076308925243136,-1.437599356852,-7.703830303272737,-4.303521321858673,-7.699416127129191,-4.1114421490929605,
//			-2.210952113323134,-6.188188866865822,-0.7052414884495191,-1.3133031798306867,-3.7444582922814273,-5.2874027411950015,-4.617765616322368,-2.7776062831899253,-4.355572083517131,-7.2950557175939,
//			-7.996708723719064,-4.783321734478049,-4.731931912129345,-4.569933409349151,-7.401545517546107,-1.0891399270913817,-3.0981217815303026,-0.7256147303864964,-4.829413789612973,-3.8194093507669757,
//			-7.955712970929332,-1.8608318614280623,-0.6635144310098946,-5.1171189471625835,-7.104136257299848,-2.45952986347622,-7.455617054486879,-6.352956841316129,-4.806438011849393,-5.5957006980369925,
//			-4.026277152880254,-0.8612143346713976,-7.002824691819305,-2.0174769821738554,-0.26405688362483826,-7.387862814671827,-1.911617626477744,-0.9489576156883395,-0.6944041438771311,-3.4814871471859785,
//			-6.2101770572386705,-5.440659515980664,-3.58764865450327,-5.121030683369815,-4.105341403056701,-7.543006449102923,-0.696904275631562,-5.728055012124286,-5.135455292049396,-3.5685087883656035,
//			-6.871078911051471,-1.8086822566196998,-4.356337713252027,-6.950582400085943,-0.4049305002222443,-0.4842886988943711,-4.895051158847372,-4.981731335420518,-6.550264596444089,-1.9595085326536132,
//			-6.388428061588297,-6.04608491330795,-4.745841249286948,-4.069369568673861,-0.8218951972376924,-6.466794060714247,-0.9947368040634812,-2.384825839015276,-4.038687744727993,-5.621910548426075,
//			-7.24414584619325,-0.8199518064094145,-0.6472718296299442,-0.1256774995458967,-5.200071543399877,-4.927191511300096,-0.17148709773800697,-0.04382605860779876,-0.5469287181127962,-2.0172583768473,
//			-2.5220058829937573,-0.9810676544698023,-2.1930930569289604,-0.4844463752877113,-4.62486775469222,-4.37982750166865,-4.745643265798097,-4.515871856982015,-1.0765266542868384,-5.769436167295778,
//			-6.89545059866552,-2.4350990483697013};
//	private double wc[] = {-6.098435688700995,-3.7029698328903757,-7.66106556774516,-4.848940944039678,-2.11081662283103,-3.968729090299754,-1.4247123252667482,-7.6909790731602685,-4.197782865493446,-4.226401778641292,-7.56411445423542,-2.818886554702522,-3.963125644666799,-4.027519677531153,-1.87307849651497,-1.428438041001879,-4.5241433395140165,-3.77590237542016,-6.720191987920935,-6.962119890421011,-6.3093416240843885,-4.10785438560378,-3.103834973655946,-0.7024514618263282,-7.254733838802305,-4.566273082418672,-1.467072309551888,-4.426904862316731,-2.8530726352308866,-4.984715389591846,-5.853818439768837,-4.790230468906157,-2.2743716429630956,-1.0940039497840015,-2.421012285389076,-7.6210116544814,-2.895390860899843,-7.384132303029631,-0.0279463770138495,-6.788851452241667,-7.316497717886063,-2.445344781420748,-6.031194997303577,-1.889913900298315,-3.6324286678280204,-7.976521482338699,-3.2515633375373945,-0.9504206217301556,-5.290004979175113,-6.44942107979621,-4.723713600876178,-2.7572100989079793,-0.6520767255686559,-6.39211000025353,-6.895473984674741,-7.183651150556179,-3.2758154134438673,-2.2342199372015115,-0.7104551437055351,-5.201353645696896,-7.71006744144939,-2.428774547488805,-1.4099806207737542,-1.7906302958829041,-6.186700005278172,-5.932009845090817,-2.4161915773383162,-1.404755820619953,-6.206454726980072,-3.749975437119038,-7.16607541790677,-2.63776581089064,-2.384379533524088,-3.501865648967086,-5.132520573775247,-7.542350776008365,-3.1937218606871136,-4.090030759606483,-0.7664720392255733,-3.4267114997041883,-7.660073876630945,-4.085683687053808,-1.8010749702810784,-0.7518341335373426,-6.816736229045448,-7.4388273255982105,-4.028021316217679,-1.3710541636919018,-1.8148774729646284,-5.343102590275693,-6.673704125091299,-6.097418915905678,-0.17605189776396468,-1.2586076434416924,-5.312087439059439,-7.820756833649101,-5.517293513279309,-0.3581450968098112,-2.0505491235480378,-5.633757055508261,-7.9047750779507,-6.229142502549345,-0.2826801802454604,-0.8837255223226332,-4.797833336808339,-6.760894847157078,-4.899026509207866,-1.18623774086329,-2.3065672599598424,-6.554962409817853,-7.275105308738622,-6.057252316651965,-2.794441171746854,-3.053545815710047,-7.629339584979711,-3.147056867428107,-6.47369554088981,-2.9157587626538914,-4.4882833142109275,-7.30255229930755,-0.22279543166410853,-0.12341204549246587}; 
	
	private double wr[] = { -2.32740071445563,-2.8893526607090703,-3.037017095514873,-0.2854842293711314,-2.7456986021289014,-2.0402114083105944,-6.066721128429623,-4.134061127232825,-2.9043385315730315,-4.024104280626276,
			-0.06933595545635017,-4.395123240732431,-4.323504778226347,-0.7698342475173394,-8.252177890062413,-5.7535148441675155,-7.612445609025603,-9.170098051016055,-6.571863092429562,-0.07441332918029483,
			-12.246951097208928,-8.598787795849208,-2.7238113298833273,-4.992964364076996,-6.421746832429183,-2.303826314289761,-5.796452720582366,-5.000958096237728,-0.6474956369724775,-9.870698340974874,
			-4.680219042279369,-1.9594481604885072,-2.6429790901364303,-0.3190043414070676,-4.86428481641325,-0.8322788848663576,-9.494037877014986,-3.137570274584796,-2.0580351480089942,-4.127421881487584,
			-4.279638978192194,-2.6280355711895313,-4.087468081610747,-1.1471808663442893,-2.902084586391767,-5.292075747461835,-2.591596365906569,-3.5697990336826915,-1.3002019095364068,-3.220955350183786,
			-4.222219374082296,-4.889037396221964,-8.602874326561578,-0.3275936216874012,-0.25209710464217644,-1.9889738601093059,-6.779360870552813,-0.27200177978166995,-9.164062771824517,-5.85294005405833,
			-2.230641501081971,-0.10169361915502924,-7.984462801941921,-4.675992453751281,-3.2492224532549385,-3.76776832895741,-4.1241384961993415,-4.850097340138329,-3.503529399062235,-5.497565159315656,
			-5.7082529698003945,-4.071168408934673,-5.201190094607422,-5.9084493769625315,-0.9527896449916632,-6.296797297151709,-8.109253010283107,-3.071622399013771,-4.951683979114432,-1.2095719976532444,
			-0.8001706884862428,-4.390235025729549,-3.134924111031892,-2.6231952078216163,-7.738087137093292,-2.93792160880683,-6.53348395850303,-3.490825462901349,-5.920851972497577,-1.4130649194410614,
			-3.099186910953155,-3.316937515953284,-3.6315920895798546,-5.543564137975889,-3.6601874368983918,-0.38387630762800523,-1.2927519686564868,-1.9694728443755978,-0.10916729342365247,-0.5101774396856174,
			-4.956379056711452,-1.0431645719551599,-6.0158646481220455,-1.5155102853572493,-0.1474137402271294,-5.957952044890135,-2.329479700388965,-3.4301586198450544,-6.72953726924667,-3.632696732683793,
			-4.065785629984903,-1.9578007843999388,-6.675957881728573,-5.823430366517912,-5.214988735315706,-2.071795964816077,-5.19334251891822,-3.034292446206176,-0.24623719052963638,-9.046527783926543,
			-14.95020265332741,-0.5708537094943686};
	private double wc[] = {-1.6235146087119046,-1.9933264658638965,-3.8653627838066624,-3.054392350712612,-11.842961166525733,-5.868879920128548,-2.377920808889331,-6.396685625316291,-0.6722346474353743,-2.439580310955011,-7.4806381475536545,-1.9839660787625237,-1.7425729154653808,-1.3980637735538712,-1.2962139848588965,-4.061300360623064,-1.7080943160872413,-0.11838069791860525,-1.314113749991921,-7.0721834722559365,-5.314317164509888,-2.649522573237325,-0.5287042715363892,-2.340613485813654,-5.796155421667712,-3.03612919193069,-2.1939639787508165,-2.2564127536799323,-7.59683244210827,-5.0906682264471765,-5.96805495873534,-2.2015011585641275,-0.920898915292312,-1.9455002789932287,-2.4860922796523997,-6.896131746606035,-1.6922703824688659,-0.20937319167016144,-3.4594569905592856,-0.041621931802694155,-6.994660437790982,-1.7891831909712026,-1.3295708897355931,-3.5830867708402514,-6.1168301339778495,-6.452867600838028,-1.5746402739772005,-1.1566479074928897,-9.489701322278467,-2.6666481012054937,-5.227840347818759,-2.0660020176094895,-0.632810394310289,-3.878509481373318,-8.000135651030291,-6.090262356726776,-1.954947023795359,-1.4041801430137548,-0.5986896221219286,-5.687188409801313,-6.818407934689431,-1.6043997336116105,-6.471215041086672,-0.3475755139399433,-1.554552775351541,-6.214223578279626,-1.9175687490267526,-1.8144365941145715,-0.6144867297848261,-6.952547248997016,-6.563799083446946,-2.0569824673273516,-1.878565971350479,-2.279600528305823,-2.4451801395797133,-11.320753298488414,-2.4881379583758583,-2.4908486079185246,-3.9020392044498373,-6.77654955305706,-8.266026922717863,-2.9156818576517005,-2.384982945328969,-0.7849114909298998,-5.6207941995246395,-4.901699981359307,-2.8599108622395777,-0.9897486824404368,-1.8680133007166313,-7.081815600512327,-3.6554149256292208,-8.37037236879555,-0.134181940872436,-0.780019761430002,-6.130144089287992,-10.01960480791101,-8.750078556402283,-0.607355244523617,-0.9055709529640726,-6.259543491052976,-10.300904851692938,-8.805760972575062,-0.09743515470100364,-2.623884558109559,-7.026451868055684,-4.919143226843773,-4.434014632656107,-0.06659976856840003,-2.713996175928343,-12.078932224536597,-3.540901581254876,-5.194268771626645,-2.3050062205135355,-3.5934401902811506,-14.00109549755792,-6.39920963098546,-8.489979023061462,-5.185581892688497,-4.607475777315428,-15.472828905145699,-0.03239250614753956,-9.48780939211547}; 
	
//	private double wr[] ={ -4.893790158448274,-5.31496570501187,-9.836173819764166,-4.178326614482076,-2.6197491374661137,-8.585946154194081,-6.959251327087351,-3.909789161257235,-10.030620350715244,-0.5292367384101748,-9.205291929508174,-6.031389313316945,-5.939462584581019,-7.394674569223202,-10.564532156383368,-8.635912248394835,-11.449169260948292,-5.319822334631821,-6.995990988849347,-4.917933224890122,-5.08255075007261,-0.24985288180965348,-3.3077826476413694,-5.881089132785366,-7.962192958154677,-0.3340270658842499,-10.706487986262005,-1.5868049105309758,-10.437712686911802,-1.5856766854286573,-4.418935120559529,-4.677885081546005,-2.0865038987412277,-11.899570248817234,-3.3471754193175425,-0.5378403886565088,-3.1594331210218325,-7.5812734130048565,-0.0039283480303513585,-11.611619498116141,-3.2745091402625377,-2.774349370687954,-7.623830948901118,-8.972405586360072,-11.195958682644838,-0.8111257992759064,-0.5854130097615631,-0.3515972384162751,-5.414356936272295,-6.377198251970714,
//			               -2.3043374148925775,-2.9311714172900345,-7.40719573954393,-5.048089507628603,-1.9490138624762139,-5.2624156301374025,-2.355468701004808,-8.94745524897194,-0.3090326101562244,-10.011947260518102,-4.412991839592481,-7.655065914866387,-11.506799787490806,-7.340912944202925,-8.287176823918529,-3.0586824996680537,-9.43768022351609,-3.519869543639542,-11.345306401900968,-5.435051890606344,-4.114876275995352,-8.76741833485096,-1.926921189989569,-5.673258923033561,-10.913042092914457,-2.9387807700635253,-0.6157765432142206,-6.129949067484311,-3.60720171901999,-3.1738552689420416,-2.759660437126371,-10.515872533668455,-0.8211341576032076,-5.776756530342879,-7.528033203873906,-8.014670995035294,-10.748333088014462,-9.704960805078354,-10.066501538621004,-9.820950507920951,-4.522234923294171,-5.582200869165044,-1.8925592157424038,-5.233803322320405,-9.475931223142648,-5.093343862847009,-6.124120366058753,-3.1345145431129016,-11.441715093508282,-8.71197565121554,
//			               -9.062778690586525,-2.484524857471751,-5.40235574774689,-5.933576703423292,-0.00717748032266563,-9.660585023767645,-0.3593959017257973,-4.546734900768139,-6.112229453734386,-7.858696063059408,-11.952265082709532,-11.826913113935063,-1.6856621210091731,-0.3235356355773078,-9.841833163772964,-5.931556808871484,-6.616370083352043,-11.050174534208088,-3.7927145819595083,-10.919150656259585,-7.860793670884012,-6.33909212201097};
//	private double wc[] ={-11.699739087673594,-4.005580103350562,-10.59166124899322,-3.8245912139568077,-6.105856689729732,-2.1606772453043313,-3.708718737375481,-9.750225449498492,-11.071952602869196,-11.951905334111515,-5.830750288182392,-4.9891869725768165,-6.0970791993218025,-10.71390556009942,-0.06859767115740212,-7.06963830018336,-5.759845860768882,-2.080055185881406,-7.835929714697476,-10.990643039205644,-11.669557786008514,-6.977292917634226,-3.5769201978796747,-6.904314206317539,-4.95033431376158,-7.3306164950148816,-1.1892512352641038,-2.741595380922286,-5.042980463992972,-10.288819051539852,-9.473969930559598,-4.191548813134787,-4.765750749003528,-1.93971176057304,-6.722122755905136,-2.763456574448133,-3.935712995692482,-7.944000306373665,-6.676995257068757,-10.55633128929967,-10.797987008993564,-4.301265781684858,-5.040653118410312,-11.725317072453969,-11.000856688288902,-11.801183666304063,-5.966324451183965,-3.321710015287202,-2.3067890093374963,-0.7878452690183781,-11.034967728005975,-3.6276796742100643,-2.120628292030606,-2.6981604178749166,-3.6976023808600154,-9.0881104248589,-4.5794155483432135,-1.9310323068343322,-1.2658856844203061,-7.326337087718643,-7.390966499291785,-2.8342266550571296,-5.748867940021249,-0.41934725435716125,-6.2159145466119075,-7.0337705669242006,-4.6505544122699884,-3.0400158397698327,-11.02704601801473,-7.238637145206148,-9.816045333653575,-5.218742719298357,-0.9735447367610277,-1.4593490319830167,-5.224148807300065,-11.584966346042126,-5.815291746965416,-7.0697568647066396,-7.633010393483109,-9.66990728148182,-5.542135784330435,-9.061077803924121,-2.0322540207967847,-0.640258371156115,-7.590568969142623,-9.540876605952183,-6.84119483437944,-2.6551874055331854,-1.633792054524159,-8.012883092483547,-3.8184013144847917,-11.921446732550379,-1.4216601461904208,-0.7720046699539864,-5.5985544609530935,-9.792476541494436,-8.348322092298064,-0.6340097882526639,-1.3552288362391653,-7.6214240266847355,-8.679982306608391,-9.230089843963961,-0.8238984461598662,-2.282633712839065,-9.539152119577484,-10.167578171997473,-9.634218303077462,-0.28400500183652966,-3.9428300185300102,-10.803957516448662,-5.6771372409290395,-8.219422775334417,-1.9853024425336407,-5.920782413039577,-10.17588499048001,-7.108355245073017,-9.942486261966327,-7.633361480231838,-7.799125721090514,-9.492316113816358,-0.23259049433406886,-5.5684662343058795}; 
	
	private double x[];
	public MDKEvalPlayer() {
		x = new double[122];
	}
	
	public MDKEvalPlayer(List<Double> weights) {
		x = new double[122];
		for(int idx=0; idx < 122; idx++) {
			wr[idx]=weights.get(idx);
		}
		for(int idx=122; idx < 244; idx++) {
			wc[idx-122]=weights.get(idx);
		}
	}
	
	private double pubeval(BackgammonBoard b) {
	        /* Backgammon move-selection evaluation function
	           for benchmark comparisons.  Computes a linear
	           evaluation function:  Score = W * X, where X is
	           an input vector encoding the board state (using
	           a raw encoding of the number of men at each location),
	           and W is a weight vector.  Separate weight vectors
	           are used for racing positions and contact positions.
	           Makes lots of obvious mistakes, but provides a
	           decent level of play for benchmarking purposes. */

	        /* Provided as a public service to the backgammon
	           programming community by Gerry Tesauro, IBM Research.
	           (e-mail: tesauro@watson.ibm.com)                     */

	        /* The following inputs are needed for this routine:

	           race   is an integer variable which should be set
	           based on the INITIAL position BEFORE the move.
	           Set race=1 if the position is a race (i.e. no contact)
	           and 0 if the position is a contact position.

	           pos[]  is an integer array of dimension 28 which
	           should represent a legal final board state after
	           the move. Elements 1-24 correspond to board locations
	           1-24 from computer's point of view, i.e. computer's
	           men move in the negative direction from 24 to 1, and
	           opponent's men move in the positive direction from
	           1 to 24. Computer's men are represented by positive
	           integers, and opponent's men are represented by negative
	           integers. Element 25 represents computer's men on the
	           bar (positive integer), and element 0 represents opponent's
	           men on the bar (negative integer). Element 26 represents
	           computer's men off the board (positive integer), and
	           element 27 represents opponent's men off the board
	           (negative integer).                                  */

	        /* Also, be sure to call rdwts() at the start of your
	           program to read in the weight values. Happy hacking] */

	        int i;
	        double score;

	        if(b.getNumMenOff(Board.Player.PLAYER)==15) return(99999999.);
	        /* all men off, best possible move */

	        setx(b); /* sets input array x[] */
	        score = 0.0;
	        if(b.isRace()) {  /* use race weights */
	            for(i=0;i<122;++i) score += wr[i]*x[i];
	        } else {  /* use contact weights */
	            for(i=0;i<122;++i) score += wc[i]*x[i];
	        }
	        return(score);
	}
	private void setx(BackgammonBoard b) {
	        /* sets input vector x[] given board position pos[] */
	        int j, n;
	        /* initialize */
	        Arrays.fill(x, 0);

	        /* first encode board locations 24-1 */
	        for(j=1;j<=24;++j) {
	        	int jm1 = j - 1;
	            n = b.get(25-j);
	            if(n!=0) {
	                if(n==-1) x[5*jm1+0] = 1.0;
	                if(n==1) x[5*jm1+1] = 1.0;
	                if(n>=2) x[5*jm1+2] = 1.0;
	                if(n==3) x[5*jm1+3] = 1.0;
	                if(n>=4) x[5*jm1+4] = (float)(n-3)/2.0;
	            }
	        }
	        /* encode opponent barmen */
	        x[120] = -(float)(b.getNumBarMen(Board.Player.OPPONENT))/2.0;
	        /* encode computer's menoff */
	        x[121] = (float)(b.getNumMenOff(Board.Player.PLAYER))/15.0;
	}

	@Override
	public BackgammonBoard move(BackgammonBoard board, BackgammonRoll roll) {
		BackgammonBoard m = board;
		List<BackgammonBoard> configs = board.getBoards(roll);
		double bestScore = Double.NEGATIVE_INFINITY;
		for(BackgammonBoard b: configs) {
			double newScore = pubeval(b);
			if(newScore>bestScore) {
				m = b;
				bestScore = newScore;
			}
		}
		return m;
	}
	
	public void setContactWeights(double[] weights) {
		for(int idx = 0; idx < wc.length; idx++) {
			wc[idx]=weights[idx];
		}
	}
	
	public void setRaceWeights(double[] weights) {
		for(int idx = 0; idx < wr.length; idx++) {
			wr[idx]=weights[idx];
		}
	}

	@Override
	public String getName() {
		return "MDKPlayer";
	}
}
